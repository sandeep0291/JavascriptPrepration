// constructor function are used to create new objects with 'new' keyword called function

function Person(name, lastName){
   this.name = name;
   this.lastName = lastName;
}

Person.prototype.fullName = function(){
  return this.name + ' ' + this.lastName;
}

var a = new Person('Sandeep', 'Kumar');

a.fullName(); // Sandeep Kumar


// Factory function are also used to create new objects without using new keyword

function helloWorld(){
  return {
    a: 'Hello',
    b: 'World',
    print: function(){
         return this.a + ' ' + this.b;
    }
  }
}

var b = helloWorld();
b.print();


Modules should be Immediately-Invoked-Function-Expressions (IIFE) to allow for private scopes - 
that is, a closure that protect variables and methods (however, 
it will return an object instead of a function). This is what it looks like:


var Exposer = (function() {
    var privateVariable = 10;

    var privateMethod = function() {
    console.log('Inside a private method!');
    privateVariable++;
    }

    var methodToExpose = function() {
    console.log('This is a method I want to expose!');
    }

    var otherMethodIWantToExpose = function() {
    privateMethod();
    }

    return {
        first: methodToExpose,
        second: otherMethodIWantToExpose
    };
})();

Exposer.first();        // Output: This is a method I want to expose!
Exposer.second();       // Output: Inside a private method!
Exposer.methodToExpose; // undefined


More design patterns are here: https://www.digitalocean.com/community/tutorial_series/javascript-design-patterns




